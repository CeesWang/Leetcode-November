/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode insertionSortList(ListNode head) {
        if (head == null) {
            return head;
        }
        ListNode start = new ListNode(head.val);
        start.next = null;
        head = head.next;
        int size = 1;
        while (head != null) {
            ListNode node = start;
            for (int i = 0; i < size; ++i) {
                if ((head.val < node.val) && i == 0) {
                    System.out.println(head.val + "  " + node.val + "   " + i);
                    ListNode begin = new ListNode(head.val);
                    begin.next = node;
                    start = begin;
                    break;
                }
                else if (head.val >= node.val && node.next == null) {
                    node.next = new ListNode(head.val);
                    break;
                }     
                else if (head.val >= node.val && head.val < node.next.val) {
                    ListNode newNode = new ListNode(head.val);
                    newNode.next = node.next;
                    node.next = newNode;
                    break;
                }
                else {
                    node = node.next;
                }
            }
            size++;
            head = head.next;
        }
        return start;
    }
}
// 4 -> 2 -> 1 -> 3
// start = 4, node = 4, head = 2, begin = 2 -> 4  
// start = 2 -> 4, node = 2 -> 4, head = 1, begin = 1 -> 2 -> 4
// start = 1 -> 2 -> 4, node = 4, head = 3, temp = node, 
