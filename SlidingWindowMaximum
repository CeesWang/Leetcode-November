class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (k == 0 || k == 1) {
            return nums;
        }
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int i = 0; i < k - 1; ++i) {
            if (map.containsKey(nums[i])){
                map.put(nums[i], map.get(nums[i]) + 1);
            }
            else {
                map.put(nums[i], 1);
            }
        }
        int [] maxArr = new int [nums.length - k  + 1];
        int idx = 0;
        for (int i = k - 1; i < nums.length; ++i) {
            if (map.containsKey(nums[i])) {
                map.put(nums[i], map.get(nums[i]) + 1);
            }
            else {
                map.put(nums[i], 1);
            }
            maxArr[idx++] = map.lastKey();
            int idxBegin = i - k + 1;
            if (map.get(nums[idxBegin]) == 1) {
                map.remove(nums[idxBegin]);
            }
            else {
                map.put(nums[idxBegin], map.get(nums[idxBegin]) - 1);
            }
        }
        return maxArr;
    }
}
