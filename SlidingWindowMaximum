class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (k == 0 || k == 1) {
            return nums;
        }
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int i = 0; i < k - 1; ++i) {
            if (map.containsKey(nums[i])){
                map.put(nums[i], map.get(nums[i]) + 1);
            }
            else {
                map.put(nums[i], 1);
            }
        }
        int [] maxArr = new int [nums.length - k  + 1];
        int idx = 0;
        for (int i = k - 1; i < nums.length; ++i) {
            if (map.containsKey(nums[i])) {
                map.put(nums[i], map.get(nums[i]) + 1);
            }
            else {
                map.put(nums[i], 1);
            }
            maxArr[idx++] = map.lastKey();
            int idxBegin = i - k + 1;
            if (map.get(nums[idxBegin]) == 1) {
                map.remove(nums[idxBegin]);
            }
            else {
                map.put(nums[idxBegin], map.get(nums[idxBegin]) - 1);
            }
        }
        return maxArr;
    }
}

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int [] maxArr = new int [nums.length - k  + 1];
        Deque<Integer> deque = new LinkedList<>();
        int idx = 0;
        for (int i = 0; i < k - 1; ++i) {
            while (!deque.isEmpty() && nums[deque.peekLast()] <= nums[i]) {
                deque.pollLast();
            }
            deque.add(i);
        }
        
        for (int i = k - 1; i < nums.length; ++i) {
            while (!deque.isEmpty() && nums[deque.peekLast()] <= nums[i]) {
                deque.pollLast();
            }
            if (!deque.isEmpty() && deque.peekFirst() <= i - k) {
                deque.pollFirst();
            }
            deque.addLast(i);
            maxArr[idx++] = nums[deque.peekFirst()];
        }
        return maxArr;
     }
}

// [1,3,-1,-3,5,3,6,7], k = 3
//      |     |
