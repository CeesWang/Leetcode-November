class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> permutationList = new ArrayList<>();
        getPermutations(permutationList,nums, 0);
        return permutationList;
    }
    
    public void getPermutations(List<List<Integer>> permutationList, int [] nums, int idx) {
        if (idx == nums.length) {
            ArrayList<Integer> permutation = new ArrayList<>();
            for (int i = 0; i < nums.length; ++i) {
                permutation.add(nums[i]);
            }
            permutationList.add(permutation);
            return;
        }
        for (int i = idx; i < nums.length; ++i) {
            if ( (idx == i) || nums[i] != nums[idx]) {
                        swap(nums, i, idx);
            getPermutations(permutationList, nums, idx + 1);
            swap(nums, i, idx);    
            }

        }
    }
    
    public void swap (int [] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
