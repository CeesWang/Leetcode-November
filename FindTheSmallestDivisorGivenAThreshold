class Solution {
    public int smallestDivisor(int[] nums, int threshold) {
        int ans = 1000000;
        int runningSum = 0;
        for (int i = 1000000; i >= 1; --i) {
            // System.out.print(i + " ");
            for (int num : nums) {
                if (runningSum > threshold) {
                    break;
                }
                runningSum += (int) Math.ceil(num * 1.0/i);
                // System.out.print(runningSum + " ");
            }
            if (runningSum <= threshold) {
                // System.out.println(i);
                ans = Math.min(i, ans);               
            }
            runningSum = 0;
            // System.out.println();
        }
        return ans;
    }
}

class Solution {
    public int smallestDivisor(int[] nums, int threshold) {
        int ans = 1000000;
        int begin = 1;
        int end = 1000000;
        while (begin <= end) {
            int mid = begin + (end - begin) / 2;
            int sum = divisorSum(nums, mid, threshold);
            if (sum <= threshold) {
                ans = Math.min(ans, mid);
                end = mid - 1;
            }
            else {
                begin = mid + 1;
            }
        }
        return ans;
    }
    
    public int divisorSum (int [] nums, int divisor, int threshold) {
        int runningSum = 0;
        for (int num : nums) {
            if (runningSum > threshold) {
                return runningSum;
            }
            runningSum += ( (num - 1) / divisor + 1);
        }
        return runningSum;    
    }
}


