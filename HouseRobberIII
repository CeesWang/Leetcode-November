/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int rob(TreeNode root) {
        if (root == null) {
            return 0;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);        
        ArrayList<Integer> list = new ArrayList<>();
        int level = 0;
        while (!queue.isEmpty()) {
            int children = queue.size();
            int sum = 0;
            for (int i = 0; i < children; ++i) {
                TreeNode node = queue.poll();
                sum += node.val;
                if (node.left != null) queue.add(node.left);
                if (node.right != null) queue.add(node.right);
            }
            if (level < 2) {
                list.add(level == 1 ? Math.max(sum,list.get(0)) : sum);
            }
            else {
                int prevprev = list.get(level - 2) + sum;
                int prev = list.get(level - 1);
                list.add(Math.max(prevprev, prev));
            }
            level++;
        }
        return list.get(level - 1);
        
    }
}
